package com.codename1.twitterui.controllers;


import com.codename1.rad.controllers.*;
import com.codename1.rad.models.Entity;
import com.codename1.rad.ui.Actions;
import com.codename1.rad.ui.SettingsForm;
import com.codename1.twitterui.models.*;
import com.codename1.rad.nodes.ActionNode;
import com.codename1.rad.nodes.ViewNode;
import com.codename1.rad.schemas.Thing;
import static com.codename1.rad.ui.UI.action;
import static com.codename1.rad.ui.UI.actions;
import static com.codename1.rad.ui.UI.badge;
import static com.codename1.rad.ui.UI.icon;
import static com.codename1.rad.ui.UI.label;

import com.codename1.twitterui.providers.DemoTweetProvider;
import com.codename1.twitterui.providers.ITweetProvider;
import com.codename1.twitterui.views.TWTGlobalTabs;
import com.codename1.twitterui.views.TWTSideBarView;
import com.codename1.twitterui.views.TWTTitleComponent;
import com.codename1.ui.FontImage;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class TWTApplicationController extends ApplicationController {

    private boolean demoMode = true;
    private TWTNavSections navSections;
    private Entity applicationModel;
    
    public static class AppNavigationEvent extends ControllerEvent {
        private TWTNavSection section;
        
        public AppNavigationEvent(Controller source, TWTNavSection section) {
            super(source);
            this.section = section;
        }
        
        public TWTNavSection getSection() {
            return section;
        }
    }
    
    static final ActionNode notInterested = action(
            label("Not interested in this"),
            icon(FontImage.MATERIAL_MOOD_BAD)
        ),
            
        unfollow = action(
            icon(FontImage.MATERIAL_REMOVE),
            label(tweet->{
                if (tweet.isEntity(ITweet.author)) {
                    return "Unfollow "+tweet.getEntity(ITweet.author).getText(Thing.identifier);
                } else if (!tweet.isEmpty(ITweet.authorId)){
                    return "Unfollow "+tweet.getText(ITweet.authorId);
                }
                return "Unfollow this user";
            })
        ),
            
        mute = action(
            icon(FontImage.MATERIAL_VOLUME_OFF),
            label(tweet->{
                if (tweet.isEntity(ITweet.author)) {
                    return "Mute "+tweet.getEntity(ITweet.author).getText(Thing.identifier);
                } else if (!tweet.isEmpty(ITweet.authorId)){
                    return "Mute "+tweet.getText(ITweet.authorId);
                }
                return "Mute this user";
            })
        ),
            
        reply = action(
            icon(FontImage.MATERIAL_CHAT_BUBBLE_OUTLINE)
        ),
        retweet = action(
            icon(FontImage.MATERIAL_FORWARD)
        ),
        favorite = action(
            icon(FontImage.MATERIAL_FAVORITE_OUTLINE)
        ),
        share = action(
            icon(FontImage.MATERIAL_SHARE)
        ),
            
        tweetDetails = action(
                   
        ),
        profile = action(
                label("Profile"),
                icon(FontImage.MATERIAL_ACCOUNT_CIRCLE)
        ),
        lists = action(label("Lists"), icon(FontImage.MATERIAL_LIST)),
        topics = action(label("Topics"), icon(FontImage.MATERIAL_CATEGORY)),
        bookmarks = action(label("Bookmarks"), icon(FontImage.MATERIAL_BOOKMARKS)),
        moments = action(label("Moments"), icon(FontImage.MATERIAL_BOLT)),
        newAccount = action(label("Create new account")),
        addExistingAccount = action(label("Add Existing Account")),
        settingsAndPrivacy = action(label("Settings and privacy")),
        helpCenter = action(label("Help Center")),
        darkMode = action(icon(FontImage.MATERIAL_LIGHTBULB_OUTLINE)),
        qrCode = action(icon(FontImage.MATERIAL_SCANNER)),
        switchProfile = action(icon(FontImage.MATERIAL_ACCOUNT_CIRCLE)),
        switchProfile2 = action(icon(FontImage.MATERIAL_ACCOUNT_BALANCE_WALLET)),
        followers = action(
                icon("Followers"),
                label("344")
        ),
        following = action(
            icon("Following"),
            label("311")
        )
        ;
    
    
    public TWTApplicationController() {

    }

    public TWTApplicationController(boolean demoMode) {
        this.demoMode = demoMode;
    }

    @Override
    public void init(Object context) {
        super.init(context);
        applicationModel  = (Entity)createApplicationModel();
        addLookup(IApplicationModel.class, (IApplicationModel)applicationModel);
        TWTGlobalTabs menuBar = new TWTGlobalTabs(applicationModel, getViewNode());
        addLookup(menuBar);
        if (isDemoMode()) {
            // If we're in demo mode, we'll add a DemoTweetProvider, which is used by the HomeFormController
            // to get its tweets.
            addLookup(ITweetProvider.class, new DemoTweetProvider());
        }

        for (TWTNavSection navSection : getNavSections()) {
            addActionListener(navSection.getAction(), evt->{
                evt.consume();
                navSection.createFormController(this).show();
            });
        }


        addActionListener(getSettingsAction(), evt-> {
            evt.consume();
            com.codename1.ui.Component c = evt.getContext().getEventSource();
            ViewController vc = ViewController.getViewController(c);
            Controller parent = this;
            if (vc != null && vc.getFormController() != null) {
                parent = vc.getFormController();
            }
            createSettingsFormController(parent).getView().show();
        });
    }
    
    
    
    private static IUserProfile createDemoProfile() {
        TWTUserProfile p = new TWTUserProfile();
        p.set(Thing.name, "Steve Hannah");
        p.set(Thing.identifier, "@shannah78");
        p.set(Thing.thumbnailUrl, "https://www.codenameone.com/img/steve.jpg");
        return p;
    }

    @Override
    public void actionPerformed(ControllerEvent evt) {
        if (evt instanceof StartEvent) {
            evt.consume();
            new HomeFormController(this).getView().show();
            return;
        }
       if (evt instanceof AppNavigationEvent) {
            // When the app navigates to a new section, it should fire this event, which we use
            // to update the global navigation state - which will update the globals tabs
            // state.
            evt.consume();
            applicationModel.set(IApplicationModel.currentSection, evt.as(AppNavigationEvent.class).getSection());
        }
        super.actionPerformed(evt);
    }
    
    
    
    public ViewNode createViewNode() {
        ViewNode viewNode = new ViewNode( 
            actions(TWTSideBarView.SIDEBAR_ACTIONS, createSidebarActions()),
            actions(TWTSideBarView.SIDEBAR_TOP_OVERFLOW_MENU, createSidebarTopOverflowMenuActions()),
            actions(TWTSideBarView.SIDEBAR_SETTINGS_ACTIONS, createSidebarSettingsActions()),
            actions(TWTSideBarView.SIDEBAR_BOTTOM_LEFT_ACTIONS, createSidebarBottomLeftActions()),
            actions(TWTSideBarView.SIDEBAR_BOTTOM_RIGHT_ACTIONS, createSidebarBottomRightActions()),
            actions(TWTSideBarView.SIDEBAR_TOP_ACTIONS, createSidebarTopActions()),
            actions(TWTSideBarView.SIDEBAR_STATS, createSidebarStatsActions()),
            actions(TWTGlobalTabs.GLOBAL_TABS, createGlobalTabs()),
            actions(TWTTitleComponent.TITLE_ACTIONS, createTitleActions())
                
        );
        return viewNode;
    }


    /**
     * Override to specify actions to display in the sidebar.
     *
     * @return The actions to display in the sidebar.
     */
    protected Actions createSidebarActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(profile, lists, topics, bookmarks, moments);
    }

    protected Actions createSidebarTopOverflowMenuActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(newAccount, addExistingAccount);
    }

    protected Actions createSidebarBottomLeftActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(darkMode);
    }

    protected Actions createSidebarSettingsActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(settingsAndPrivacy, helpCenter);
    }

    protected Actions createSidebarBottomRightActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(qrCode);
    }

    protected Actions createSidebarTopActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(switchProfile, switchProfile2);
    }

    protected Actions createSidebarStatsActions() {
        if (!isDemoMode()) return new Actions();
        return new Actions(following, followers);
    }

    protected Actions createGlobalTabs() {
        return getNavSections().getActions();
    }

    public TWTNavSections getNavSections() {
        if (navSections == null) {
            navSections = createNavSections();
        }
        return navSections;
    }

    protected TWTNavSections createNavSections() {
        if (!isDemoMode()) {
            return new TWTNavSections();
        }

        TWTNavSections out = new TWTNavSections();
        out.add(HomeFormController.getHomeNavSection());
        out.add(SearchTabsController.getSearchNavSection());
        out.add(AlertsFormController.getAlertsNavSection());
        out.add(InboxFormController.getInboxNavSection());
        return out;

    }



    protected Actions createTitleActions() {
        return new Actions(getSettingsAction());
    }


    protected boolean isDemoMode() {
        return demoMode;
    }


    protected IApplicationModel createApplicationModel() {
        if (isDemoMode()) {
            TWTApplicationModel out = new TWTApplicationModel();
            out.set(IApplicationModel.user, (Entity)createDemoProfile());
            return out;
        }
        return new TWTApplicationModel();
    }

    protected IUserProfile createUserProfile() {
        if (isDemoMode()) {
            return createDemoProfile();
        }
        return new TWTUserProfile();
    }

    @Override
    public <T> T lookup(Class<T> type) {
        if (type == IUserProfile.class) {
            return (T)applicationModel.get(IApplicationModel.user);
        }
        return super.lookup(type);
    }

    protected Actions createTweetMenuActions() {
        return new Actions();
    }

    protected Actions createTweetActions() {
        return new Actions();
    }

    protected Actions createTweetProfileAvatarClickedMenuActions() {
        return new Actions();
    }

    protected ActionNode createTweetClickedAction() {
        return action();
    }

    protected SettingsFormController createSettingsFormController(Controller parent) {
        return new SettingsFormController(parent);
    }

    private ActionNode settingsAction;

    private ActionNode getSettingsAction() {
        if (settingsAction == null) {
            settingsAction = createSettingsAction();
        }
        return settingsAction;
    }

    protected ActionNode createSettingsAction() {

        return action(
                icon(FontImage.MATERIAL_SETTINGS)
        );
    }

    protected <T extends Entity & ITweet> FormController createTweetDetailsController(Controller parent, T tweet) {
        return new TweetDetailsController<T>(parent, tweet);
    }

    protected FormController createHomeFormController(Controller parent) {
        return new HomeFormController(parent);
    }


}