package com.codename1.twitterui.controllers;


import com.codename1.rad.components.loginform.LoginFormController;
import com.codename1.rad.components.loginform.LoginView;
import com.codename1.rad.components.loginform.LoginViewDelegate;
import com.codename1.rad.controllers.*;
import com.codename1.rad.models.Attribute;
import com.codename1.rad.ui.Actions;

import com.codename1.twitterui.components.loginview.TWTLoginFormController;
import com.codename1.twitterui.providers.DemoNewsProvider;
import com.codename1.twitterui.providers.DemoTweetProvider;
import com.codename1.twitterui.providers.INewsProvider;
import com.codename1.twitterui.providers.ITweetProvider;
import com.codename1.twitterui.schemas.TweetSchema;
import com.codename1.twitterui.models.*;
import com.codename1.rad.nodes.ActionNode;
import com.codename1.rad.nodes.ViewNode;
import com.codename1.rad.schemas.Thing;

import com.codename1.twitterui.views.TWTGlobalTabs;
import com.codename1.twitterui.views.TWTSideBarView;
import com.codename1.twitterui.views.TWTTitleComponent;
import com.codename1.ui.CN;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;

import static com.codename1.rad.ui.UI.*;
import static com.codename1.rad.util.NonNull.empty;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class TWTApplicationController extends ApplicationController {



    private ActionNode homeAction;
    private ActionNode showTweetDetailsAction;
    private ActionNode settingsAction;
    private ActionNode searchAction;
    private ActionNode refreshTweetsAction;
    private ActionNode loadMoreTweetsAction;
    private ActionNode notInterested;
    private ActionNode unfollow;
    private ActionNode mute;
    private ActionNode reply;
    private ActionNode retweet;
    private ActionNode favorite;
    private ActionNode share;
    private ActionNode tweetDetails;
    private ActionNode profile;
    private ActionNode lists;
    private ActionNode topics;
    private ActionNode bookmarks;
    private ActionNode moments;
    private ActionNode newAccount;
    private ActionNode addExistingAccount;
    private ActionNode settingsAndPrivacy;
    private ActionNode helpCenter;
    private ActionNode darkMode;
    private ActionNode qrCode;
    private ActionNode switchProfile;
    private ActionNode switchProfile2;
    private ActionNode followers;
    private ActionNode following
    ;

    public ActionNode getRetweetAction() {
        return retweet;
    }

    protected void initControllerActions() {


        addActions(TWTSideBarView.SIDEBAR_ACTIONS, getSidebarActions());
        addActions(TWTSideBarView.SIDEBAR_TOP_OVERFLOW_MENU, getSidebarTopOverflowActions());
        addActions(TWTSideBarView.SIDEBAR_SETTINGS_ACTIONS, getSidebarSettingsActions());
        addActions(TWTSideBarView.SIDEBAR_BOTTOM_LEFT_ACTIONS, getSidebarBottomLeftActions());
        addActions(TWTSideBarView.SIDEBAR_BOTTOM_RIGHT_ACTIONS, getSidebarBottomRightActions());
        addActions(TWTSideBarView.SIDEBAR_TOP_ACTIONS, getSidebarTopActions());
        addActions(TWTSideBarView.SIDEBAR_STATS, getSidebarStatsActions());
        addActions(TWTGlobalTabs.GLOBAL_TABS, getGlobalTabs());
        addActions(TWTTitleComponent.TITLE_ACTIONS, createTitleActions());


        homeAction = ActionNode.builder()
                .icon(FontImage.MATERIAL_HOME)
                .build();
        showTweetDetailsAction = ActionNode.builder()
                .build();

        searchAction = ActionNode.builder()
                .build();

        settingsAction = ActionNode.builder()
                .icon(FontImage.MATERIAL_SETTINGS)
                .build();

        //refreshNewsAction = ActionNode.builder().build();
        //loadMoreNewsAction = ActionNode.builder().build();
        refreshTweetsAction = ActionNode.builder().build();
        loadMoreTweetsAction = ActionNode.builder().build();

        notInterested = action(
                label("Not interested in this"),
                icon(FontImage.MATERIAL_MOOD_BAD)
        );

        unfollow = action(
                icon(FontImage.MATERIAL_REMOVE),
                label(tweet->{
                    if (tweet.getEntity().isEntity(TweetSchema.author)) {
                        return "Unfollow "+tweet.getEntity().getEntity(TweetSchema.author).getEntity().getText(Thing.identifier);
                    } else if (!tweet.getEntity().isEmpty(TweetSchema.authorId)){
                        return "Unfollow "+tweet.getEntity().getText(TweetSchema.authorId);
                    }
                    return "Unfollow this user";
                })
        );

        mute = action(
                icon(FontImage.MATERIAL_VOLUME_OFF),
                label(tweet->{
                    if (tweet.getEntity().isEntity(TweetSchema.author)) {
                        return "Mute "+tweet.getEntity().getEntity(TweetSchema.author).getEntity().getText(Thing.identifier);
                    } else if (!tweet.getEntity().isEmpty(TweetSchema.authorId)){
                        return "Mute "+tweet.getEntity().getText(TweetSchema.authorId);
                    }
                    return "Mute this user";
                })
        );

        reply = action(
                icon(FontImage.MATERIAL_CHAT_BUBBLE_OUTLINE)
        );
        retweet = action(
                icon(FontImage.MATERIAL_FORWARD)
        );
        favorite = action(
                icon(FontImage.MATERIAL_FAVORITE_OUTLINE)
        );
        share = action(
                icon(FontImage.MATERIAL_SHARE)
        );

        tweetDetails = action(

        );
        profile = action(
                label("Profile"),
                icon(FontImage.MATERIAL_ACCOUNT_CIRCLE)
        );
        lists = action(label("Lists"), icon(FontImage.MATERIAL_LIST));
        topics = action(label("Topics"), icon(FontImage.MATERIAL_CATEGORY));
        bookmarks = action(label("Bookmarks"), icon(FontImage.MATERIAL_BOOKMARKS));
        moments = action(label("Moments"), icon(FontImage.MATERIAL_BOLT));
        newAccount = action(label("Create new account"));
        addExistingAccount = action(label("Add Existing Account"));
        settingsAndPrivacy = action(label("Settings and privacy"));
        helpCenter = action(label("Help Center"));
        darkMode = action(icon(FontImage.MATERIAL_LIGHTBULB_OUTLINE));
        qrCode = action(icon(FontImage.MATERIAL_SCANNER));
        switchProfile = action(icon(FontImage.MATERIAL_ACCOUNT_CIRCLE));
        switchProfile2 = action(icon(FontImage.MATERIAL_ACCOUNT_BALANCE_WALLET));
        followers = action(
                icon("Followers"),
                label("344")
        );
        following = action(
                icon("Following"),
                label("311")
        );
    }

    private boolean demoMode = true;

    private TWTApplicationModel applicationModel;



    protected void initApplicationModel(TWTApplicationModel model) {
        model.setCurrentSection(homeAction);
        model.setUser(createDemoProfile());
    }


    @Override
    protected void onStartController() {
        super.onStartController();

        getApplicationModel();
        initApplicationModel(applicationModel);
        addLookup(TWTApplicationModel.class, applicationModel);
        TWTGlobalTabs menuBar = new TWTGlobalTabs(applicationModel, (ViewNode)getViewNode());
        addLookup(menuBar);

        addActionListener(homeAction, evt -> {
            evt.consume();
            createTweetListFormController(this).show();

        });

        addActionListener(showTweetDetailsAction, evt -> {
            evt.consume();
            new TweetDetailsController(evt.getFormController(), TweetWrapper.wrap(evt.getEntity())).show();
        });

        addActionListener(searchAction, evt -> {
            evt.consume();
            new SearchFormController(evt.getFormController()).show();
        });

        addActionListener(settingsAction, evt -> {
            evt.consume();
            new SettingsFormController(evt.getFormController()).show();
        });

        setNewsProvider(createNewsProvider());
        addActionListener(getRefreshTweetsAction(), getTweetProvider());
        addActionListener(getLoadMoreTweetsAction(), getTweetProvider());

    }


    
    
    public TWTApplicationController() {

    }

    public TWTApplicationController(boolean demoMode) {
        this.demoMode = demoMode;
    }




    private static TWTUserProfile createDemoProfile() {
        TWTUserProfile p = new TWTUserProfileImpl();
        p.set(Thing.name, "Steve Hannah");
        p.set(Thing.identifier, "@shannah78");
        p.set(Thing.thumbnailUrl, "https://www.codenameone.com/img/steve.jpg");
        return p;
    }

    @Override
    public void actionPerformed(ControllerEvent evt) {
        if (evt instanceof StartEvent) {
            if (((StartEvent) evt).getCurrentForm() == null) {
                evt.consume();

                if (isLoggedIn()) {
                    createTweetListFormController(this).show();
                } else {
                    createLoginFormController(this).show();
                }


                return;
            }
        }




        super.actionPerformed(evt);
    }
    
    public boolean isLoggedIn() {
        return applicationModel != null && applicationModel.getUser() != null && !empty(applicationModel.getUser().getIdentifier());
    }
    
    public ViewNode createViewNode() {
        return super.createViewNode();
    }

    /**
     * Gets the global tab actions.
     * @return
     */
    private Actions getGlobalTabs() {
        return new Actions(homeAction);
    }

    private Actions getSidebarActions() {
        return new Actions(profile, lists, topics, bookmarks, moments);
    }




    private Actions getSidebarTopOverflowActions() {
        return new Actions(newAccount, addExistingAccount);
    }

    private Actions getSidebarBottomLeftActions() {

        return new Actions(darkMode);
    }

    private Actions getSidebarSettingsActions() {

        return new Actions(settingsAndPrivacy, helpCenter);
    }

    private Actions getSidebarBottomRightActions() {

        return new Actions(qrCode);
    }

    private Actions getSidebarTopActions() {

        return new Actions(switchProfile, switchProfile2);
    }

    private Actions getSidebarStatsActions() {

        return new Actions(following, followers);
    }





    public Actions createTitleActions() {
        return new Actions(settingsAction);
    }




    public TWTApplicationModel getApplicationModel() {
        if (applicationModel == null) {
            applicationModel = createApplicationModel();

        }
        return applicationModel;
    }

    public TWTApplicationModel createApplicationModel() {
        return new TWTApplicationModelImpl();
    }

    public ITweetProvider getTweetProvider() {
        return new DemoTweetProvider();
    }



    @Override
    public <T> T lookup(Class<T> type) {
        if (TWTUserProfile.class.equals(type)) {
            return (T)applicationModel.getUser();
        }
        return super.lookup(type);
    }




    public Actions getTweetMenuActions() {
        return new Actions(notInterested, unfollow, mute);

    }

    public Actions getTweetActions() {
        return new Actions( reply, retweet, favorite, share);

    }

    public Actions getTweetProfileAvatarClickedMenuActions() {
        return new Actions(unfollow);

    }

    public ViewController createNewsCategoryController(Controller parent, TWTNewsCategory category) {
        return new NewsCategoryController(parent, category);
    }

    public FormController createLoginFormController(Controller parent) {
        return new TWTLoginFormController(parent);
    }


    public FormController createTweetListFormController(Controller parent) {
        return new TweetListFormController(parent);
    }



    public ActionNode getRefreshTweetsAction() {
        return refreshTweetsAction;
    }

    public ActionNode getLoadMoreTweetsAction() {
        return loadMoreTweetsAction;
    }



    public ActionNode getSearchAction() {
        return searchAction;
    }

    public ActionNode getTweetDetailsAction() {
        return tweetDetails;
    }

    public ActionNode getReplyAction() {
        return reply;
    }

    public ActionNode getFavouriteAction() {
        return favorite;
    }

    public ActionNode getShareAction() {
        return share;
    }

    public ActionNode getMuteAction() {
        return mute;
    }



    public void setLoginViewDelegate(LoginViewDelegate delegate) {
        addLookup(LoginViewDelegate.class, delegate);
    }

    public LoginViewDelegate getLoginViewDelegate() {
        return lookup(LoginViewDelegate.class);
    }

    public void setNewsProvider(INewsProvider provider) {
        addLookup(INewsProvider.class, provider);
    }

    public INewsProvider getNewsProvider() {
        return lookup(INewsProvider.class);
    }

    protected INewsProvider createNewsProvider() {
        return new DemoNewsProvider();
    }


}